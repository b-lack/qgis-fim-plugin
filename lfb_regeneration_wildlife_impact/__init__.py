# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LfbRegenerationWildlifeImpact
                                 A QGIS plugin
 Lfb Regeneration and Wildlife Impact Monitoring
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-08
        copyright            : (C) 2023 by Gr√ºnecho
        email                : support@grunecho.de
        git sha              : $Format:%H$
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script initializes the plugin, making it known to QGIS.
"""

import pathlib
import sys
import os.path

from qgis.core import QgsMessageLog

# noinspection PyPep8Naming
def classFactory(iface):  # pylint: disable=invalid-name
    """Load LfbRegenerationWildlifeImpact class from file LfbRegenerationWildlifeImpact.

    :param iface: A QGIS interface instance.
    :type iface: QgsInterface
    """
    #

    installJsonschema()

    from .lfb_regeneration_wildlife_impact import LfbRegenerationWildlifeImpact
    return LfbRegenerationWildlifeImpact(iface)


def installJsonschema():
    try:
        import jsonschema
    except ModuleNotFoundError:
        import subprocess

        subprocess.check_call(["python", "-m", "pip", "install", "jsonschema"])
        #pip.main(['install', 'jsonschema'])

def installer_func():

    plugin_dir = os.path.dirname(os.path.realpath(__file__))

    # QgsMessageLog.logMessage("Plugin dir: {}".format(plugin_dir), "LFG")

    try:
        import pip
    except ImportError:
        exec(
            open(str(pathlib.Path(plugin_dir, 'scripts', 'get_pip.py'))).read()
        )
        import pip
        # just in case the included version is old
        pip.main(['install', '--upgrade', 'pip'])

    sys.path.append(plugin_dir)

    sc = os.path.join(plugin_dir,'requirements.txt')
    with open(os.path.join(plugin_dir,'requirements.txt'), "r") as requirements:
        for dep in requirements.readlines():
            dep = dep.strip().split("==")[0]
            try:
                __import__(dep)
            except ImportError as e:
                print("{} not available, installing".format(dep))
                pip.main(['install', dep])