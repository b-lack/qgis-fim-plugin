# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LfbRegenerationWildlifeImpactDialog
                                 A QGIS plugin
 Lfb Regeneration and Wildlife Impact Monitoring
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gr√ºnecho
        email                : support@grunecho.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.core import QgsMessageLog, QgsDataSourceUri
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtWidgets import QDialog

from PyQt5 import QtCore

import sqlite3

import json
import psycopg2



UI_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'db_widget.ui'))


class DBWidget(QtWidgets.QWidget, UI_CLASS):

    def __init__(self, interface):
        """Constructor."""

        QDialog.__init__(self, interface.mainWindow())

        self.setupUi(self)

        self.connR = sqlite3.connect(':memory:')
        self.connR.enable_load_extension(True)

        #now we can load the extension
        # depending on your OS and sqlite/spatialite version you might need to add 
        # '.so' (Linux) or '.dll' (Windows) to the extension name

        #mod_spatialite (recommended)
        self.connR.execute('SELECT load_extension("mod_spatialite")')   
        self.connR.execute('SELECT InitSpatialMetaData(1);')  

        # libspatialite
        #connR.execute('SELECT load_extension("libspatialite")')
        #connR.execute('SELECT InitSpatialMetaData();')

        self.curR = self.connR.cursor()


        self.importDump(self.connR)
        self.connectPostgres()


    def importDump(self, connR):

        # dump_vwm_schema_d.sql /home/gerrit/Sites/lfb/lfb-regeneration_wildlife_impact_monitoring/lfb_regeneration_wildlife_impact/resources/dump_vwm_schema_d.sql
        dirname = os.path.dirname(__file__)
        filename = os.path.realpath(os.path.join(dirname, '../..', 'assets', 'test.sql'))

        # Open and read the file as a single buffer
        fd = open(filename, 'r')
        sqlFile = fd.read()
        fd.close()

        connR.executescript(sqlFile)

        cursor = self.curR.execute("""SELECT * FROM io_test""")


        self.curR.execute("""INSERT INTO io_test(json, dbh) VALUES (?, 34)""", (json.dumps({'test': 'test'}),))
        self.curR.execute("""INSERT INTO io_test(json, dbh) VALUES (?, 12)""", (json.dumps({'test': 'test2'}),))

        cursor = self.curR.execute("""SELECT * FROM io_test""")

    def connectPostgres(self):

        conn = psycopg2.connect("dbname='VWM'host='localhost' user='postgres' password='hardcore'")
        cur = conn.cursor()
        sql = "SELECT * from io_test;"
        cur.execute(sql)
        result = cur.fetchall()

        cur.execute("INSERT INTO io_test (json, dbh) VALUES (%s, %s)", (json.dumps({'test': 'test'}), 66))
        conn.commit()


        TABLE_TO_DUMP = 'table_to_dump'
        DB_FILE = 'db_file'

        #print(self.getTableDump(DB_FILE, TABLE_TO_DUMP))

    def getTableDump(db_file, table_to_dump):
        conn = sqlite3.connect(':memory:')    
        cu = conn.cursor()
        cu.execute("attach database '" + db_file + "' as attached_db")
        cu.execute("select sql from attached_db.sqlite_master "
                "where type='table' and name='" + table_to_dump + "'")
        sql_create_table = cu.fetchone()[0]
        cu.execute(sql_create_table);
        cu.execute("insert into " + table_to_dump +
                " select * from attached_db." + table_to_dump)
        conn.commit()
        cu.execute("detach database attached_db")
        return "\n".join(conn.iterdump())

    def example(self):


        self.curR.execute('''CREATE TABLE my_line(id INTEGER PRIMARY KEY)''')
        self.curR.execute('SELECT AddGeometryColumn("my_line","geom" , 4326, "LINESTRING", 2)')
        self.connR.commit()

        polygon_wkt = 'POLYGON ((11 50,11 51,12 51,12 50,11 50))'

        XA = 11
        YA = 52
        XB = 12
        YB = 49

        line_wkt = 'LINESTRING({0} {1}, {2} {3})'.format(XA, YA, XB, YB)

        self.curR.execute("""INSERT INTO my_line VALUES (?,GeomFromText(?, 4326))""", (1, line_wkt))

        self.connR.commit()

        cursor = self.connR.execute('''
            SELECT astext(st_intersection(geom, GeomFromText(?, 4326))) from my_line
            WHERE st_intersects(geom, GeomFromText(?, 4326))''', (polygon_wkt, polygon_wkt))


        




    