# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LfbRegenerationWildlifeImpactDialog
                                 A QGIS plugin
 Lfb Regeneration and Wildlife Impact Monitoring
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gr√ºnecho
        email                : support@grunecho.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import uuid
import json

from qgis.core import QgsMessageLog, QgsProject, QgsWkbTypes, QgsVectorFileWriter, QgsFeature, QgsGeometry, QgsPointXY
from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtWidgets import QDialog
from qgis.PyQt.QtCore import QDateTime, QJsonDocument
from PyQt5.QtNetwork import  QNetworkAccessManager, QNetworkRequest, QNetworkReply
from PyQt5.QtCore import QCoreApplication, QUrl


#from PyQt5.uic import loadUi
from PyQt5 import QtCore, QtGui

#from ...utils.helper import Utils


UI_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'unterlosnr_dialog.ui'))

CHANGE_UNTERLOSNR = "https://db01.simplex4data.de/projekte/lfb/postgrest/rpc/import_unterlosnr"

class UnterlosnrDialog(QDialog, UI_CLASS):

    token_changed = QtCore.pyqtSignal(str)
    set_email = QtCore.pyqtSignal(str)

    def __init__(self, parent=None, feature=None, token=None):
        """Constructor."""

        QDialog.__init__(self, parent)
        self.setupUi(self)

        self.token = token

        unterlos_nr = ""
        # Set unterlos_nr if feature is a QgsFeature and contains 'unterlosnr'
        if feature and isinstance(feature, QgsFeature) and 'unterlosnr' in feature.fields().names():
            unterlos_nr = feature['unterlosnr']

        self.change_btn_send.clicked.connect(self._save_unterlosnr)

        self.losnummer_old.setText(unterlos_nr)
        self.losnummer_new.setText(unterlos_nr)

        self.unterlosnr_error_label.setStyleSheet("color: red")

    def _save_unterlosnr(self):
        """
        Save the unterlosnr
        """

        unterlosnr_old = self.losnummer_old.text()
        unterlosnr_new = self.losnummer_new.text()

        if unterlosnr_old == "" or unterlosnr_new == "":
            self.unterlosnr_error_label.setText("unterlosnr is empty")
            return

        try:

            json = {
                "unterlosnr_old": unterlosnr_old,
                "unterlosnr_new": unterlosnr_new
            }
            document = QJsonDocument(json)

            request = QNetworkRequest(QUrl(CHANGE_UNTERLOSNR))
            request.setHeader(QNetworkRequest.ContentTypeHeader, "application/json")
            request.setRawHeader(b"Authorization", f"Bearer {self.token}".encode())

            self.nam = QNetworkAccessManager()
            self.nam.finished.connect(self.handleResponse)
            self.nam.post(request, document.toJson())

        except Exception as e:
            QgsMessageLog.logMessage(e)


    ## OLD
    def set_token(self, token=None):
        self.token = token
        self.token_changed.emit(self.token)

    def enable_send_btn(self, reset=False):
        self.change_btn_send.setEnabled(True)
        self.change_btn_send.setText("Senden")
        self.change_btn_send.repaint()
        
    def handleResponse(self, reply):
        """
        Handle the response from the server.
        """
        
        if reply.error():
            self.unterlosnr_error_label.setText(f'Failed: {reply.errorString}')
            self.enable_send_btn(True)
            return
        
        response = json.loads(reply.readAll().data().decode())
        if 'message' in response.keys():
            self.unterlosnr_error_label.setText(response['message'])
            self.enable_send_btn(True)
            return

        if 'token' in response.keys():
            self.set_token(response['token'])

            self.unterlosnr_error_label.setText("")
            self.enable_send_btn(True)
            self.close()
        else:
            self.unterlosnr_error_label.setText("Login failed")
            self.enable_send_btn(True)